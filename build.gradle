plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2021.3.1"

    id "com.diffplug.spotless" version "5.12.5"
}

deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamOrDefault(1574)
        }
    }
    artifacts {
        frcNativeArtifact("frcCpp") {
            targets << "roborio"
            component = "frcUserProgram"
            debug = frc.getDebugOrDefault(false)
        }
    }
}

dependencies {
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)
}

sim {
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir "src/main/cpp"
                    include "**/*.cpp", "**/*.cc"
                }
                exportedHeaders {
                    srcDir "src/main/cpp"
                }
            }

            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir "src/test/cpp"
                    include "**/*.cpp"
                }
            }

            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
            wpi.deps.googleTest(it)
        }
    }
}

def clangFormatVersion = "clang-format --version".execute().text
clangFormatVersion = clangFormatVersion.substring(clangFormatVersion.indexOf("version") + 8).trim()

spotless {
    format "cpp", {
        target "src/**/*.cpp"

        clangFormat(clangFormatVersion)
    }

    format "h", {
        target "src/**/*.h"

        clangFormat(clangFormatVersion)
    }
}

task buildAthena {
	dependsOn "frcUserProgramLinuxathenaReleaseExecutable"
}

task test {
	dependsOn "runFrcUserProgramTest" + wpi.platforms.desktop.capitalize() + "ReleaseGoogleTestExe"
}

task intellisense {
    dependsOn "generateCompileCommands"

    doLast {
        def commands = new groovy.json.JsonSlurper().parseText(file("build/compile_commands/" + wpi.platforms.desktop + "/compile_commands.json").text)

        def firstCommand = commands[0].command
        firstCommand = firstCommand.substring(firstCommand.indexOf(" "))
        firstCommand = firstCommand.substring(0, firstCommand.lastIndexOf(" "))
        firstCommand += "-c"

        commands.each {
            it.command += " -c"
        }

        new File("build/compile_commands/compile_commands.json").text = groovy.json.JsonOutput.toJson(commands)
        new File("build/compile_commands/compile_flags.txt").text = firstCommand

        def includeAll = ""

        for (String header : edu.wpi.first.vscode.tooling.ToolChainGenerator.generateToolChains(getProject())[0].getBinaries()[0].getLibHeaders()) {
            if (!header.contains("src") && !header.contains("visa") && !header.contains("chipobject") && !header.contains("netcomm")) {
                new File(header).eachFileRecurse (groovy.io.FileType.FILES) { file ->
                    def include = file.toString().substring(header.length())

                    if (!include.contains("LICENSE") && !include.contains("Eigen")) {
                        includeAll += "#include <" + include + ">\n"
                    }
                }
            }
        }

        new File("IncludeAll.h").text = includeAll
    }
}
